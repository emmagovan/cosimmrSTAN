// Generated by rstantools.  Do not edit by hand.

/*
    cosimmrSTAN is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    cosimmrSTAN is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with cosimmrSTAN.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_STAN_nested_1_random_effect_pxr_raw_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 92> locations_array__ =
  {" (found before start of program)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 22, column 2 to column 31)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 23, column 2 to column 32)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 24, column 2 to column 29)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 25, column 2 to column 21)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 26, column 2 to column 22)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 30, column 2 to column 49)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 31, column 2 to column 20)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 32, column 2 to column 17)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 33, column 2 to column 21)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 34, column 2 to column 17)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 38, column 10 to column 57)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 36, column 19 to line 39, column 5)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 36, column 4 to line 39, column 5)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 35, column 17 to line 40, column 3)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 35, column 2 to line 40, column 3)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 42, column 4 to column 57)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 41, column 17 to line 43, column 3)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 41, column 2 to line 43, column 3)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 46, column 6 to line 47, column 107)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 45, column 19 to line 48, column 5)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 45, column 4 to line 48, column 5)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 44, column 17 to line 49, column 3)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 44, column 2 to line 49, column 3)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 55, column 6 to column 58)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 54, column 20 to line 56, column 5)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 54, column 4 to line 56, column 5)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 57, column 4 to column 29)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 58, column 5 to column 31)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 53, column 17 to line 59, column 3)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 53, column 2 to line 59, column 3)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 61, column 2 to column 29)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 63, column 2 to column 45)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 64, column 2 to column 47)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 68, column 6 to column 134)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 69, column 6 to column 48)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 67, column 19 to line 70, column 5)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 67, column 4 to line 70, column 5)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 66, column 17 to line 71, column 3)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 66, column 2 to line 71, column 3)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 2, column 2 to column 17)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 3, column 2 to column 17)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 4, column 2 to column 17)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 5, column 2 to column 18)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 6, column 2 to column 18)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 7, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 7, column 12 to column 13)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 7, column 2 to column 17)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 8, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 8, column 12 to column 13)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 8, column 2 to column 17)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 9, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 9, column 12 to column 13)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 9, column 2 to column 22)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 10, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 10, column 12 to column 13)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 10, column 2 to column 22)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 11, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 11, column 12 to column 13)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 11, column 2 to column 20)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 12, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 12, column 12 to column 13)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 12, column 2 to column 20)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 13, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 13, column 2 to column 24)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 14, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 14, column 2 to column 23)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 15, column 2 to column 25)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 16, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 16, column 2 to column 27)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 17, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 17, column 12 to column 14)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 17, column 2 to column 24)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 18, column 11 to column 12)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 18, column 4 to column 28)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 19, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 19, column 2 to column 25)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 22, column 18 to column 19)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 23, column 18 to column 19)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 24, column 18 to column 19)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 25, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 25, column 12 to column 13)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 26, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 26, column 12 to column 14)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 30, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 31, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 32, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 32, column 12 to column 13)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 33, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 33, column 12 to column 13)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 34, column 9 to column 10)",
  " (in 'STAN_nested_1_random_effect_pxr_raw', line 34, column 12 to column 13)"};
#include <stan_meta_header.hpp>
class model_STAN_nested_1_random_effect_pxr_raw final : public model_base_crtp<model_STAN_nested_1_random_effect_pxr_raw> {
private:
  int J;
  int N;
  int K;
  int L1;
  int L2;
  Eigen::Matrix<double,-1,-1> y_data__;
  Eigen::Matrix<double,-1,-1> q_data__;
  Eigen::Matrix<double,-1,-1> s_mean_data__;
  Eigen::Matrix<double,-1,-1> c_mean_data__;
  Eigen::Matrix<double,-1,-1> s_sd_data__;
  Eigen::Matrix<double,-1,-1> c_sd_data__;
  Eigen::Matrix<double,-1,1> sigma_shape_data__;
  Eigen::Matrix<double,-1,1> sigma_rate_data__;
  double not_solo;
  Eigen::Matrix<double,-1,-1> X_intercept_data__;
  Eigen::Matrix<double,-1,-1> X_inner_data__;
  Eigen::Matrix<double,-1,1> omicron_shape_data__;
  Eigen::Matrix<double,-1,1> omicron_rate_data__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> y{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> q{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> s_mean{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> c_mean{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> s_sd{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> c_sd{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_shape{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_rate{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_intercept{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_inner{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> omicron_shape{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> omicron_rate{nullptr, 0};
public:
  ~model_STAN_nested_1_random_effect_pxr_raw() {}
  model_STAN_nested_1_random_effect_pxr_raw(stan::io::var_context& context__,
                                            unsigned int random_seed__ = 0,
                                            std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_STAN_nested_1_random_effect_pxr_raw_namespace::model_STAN_nested_1_random_effect_pxr_raw";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 40;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 41;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 42;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "L1", "int",
        std::vector<size_t>{});
      L1 = std::numeric_limits<int>::min();
      current_statement__ = 43;
      L1 = context__.vals_i("L1")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "L1", L1, 1);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "L2", "int",
        std::vector<size_t>{});
      L2 = std::numeric_limits<int>::min();
      current_statement__ = 44;
      L2 = context__.vals_i("L2")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "L2", L2, 1);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("y", "J", J);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(J)});
      y_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, J,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,-1>>(y_data__.data(), N, J);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 47;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 47;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 47;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 47;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 48;
      stan::math::validate_non_negative_index("q", "K", K);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("q", "J", J);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "q", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(J)});
      q_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, J,
                   std::numeric_limits<double>::quiet_NaN());
      new (&q) Eigen::Map<Eigen::Matrix<double,-1,-1>>(q_data__.data(), K, J);
      {
        std::vector<local_scalar_t__> q_flat__;
        current_statement__ = 50;
        q_flat__ = context__.vals_r("q");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 50;
            stan::model::assign(q, q_flat__[(pos__ - 1)],
              "assigning variable q", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 50;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("s_mean", "K", K);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("s_mean", "J", J);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "s_mean", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(J)});
      s_mean_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, J,
                        std::numeric_limits<double>::quiet_NaN());
      new (&s_mean)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(s_mean_data__.data(), K, J);
      {
        std::vector<local_scalar_t__> s_mean_flat__;
        current_statement__ = 53;
        s_mean_flat__ = context__.vals_r("s_mean");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 53;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 53;
            stan::model::assign(s_mean, s_mean_flat__[(pos__ - 1)],
              "assigning variable s_mean", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 53;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 54;
      stan::math::validate_non_negative_index("c_mean", "K", K);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("c_mean", "J", J);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "c_mean", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(J)});
      c_mean_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, J,
                        std::numeric_limits<double>::quiet_NaN());
      new (&c_mean)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(c_mean_data__.data(), K, J);
      {
        std::vector<local_scalar_t__> c_mean_flat__;
        current_statement__ = 56;
        c_mean_flat__ = context__.vals_r("c_mean");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 56;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 56;
            stan::model::assign(c_mean, c_mean_flat__[(pos__ - 1)],
              "assigning variable c_mean", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 56;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 57;
      stan::math::validate_non_negative_index("s_sd", "K", K);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("s_sd", "J", J);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "s_sd", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(J)});
      s_sd_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, J,
                      std::numeric_limits<double>::quiet_NaN());
      new (&s_sd) Eigen::Map<Eigen::Matrix<double,-1,-1>>(s_sd_data__.data(),
        K, J);
      {
        std::vector<local_scalar_t__> s_sd_flat__;
        current_statement__ = 59;
        s_sd_flat__ = context__.vals_r("s_sd");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 59;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 59;
            stan::model::assign(s_sd, s_sd_flat__[(pos__ - 1)],
              "assigning variable s_sd", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 59;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 60;
      stan::math::validate_non_negative_index("c_sd", "K", K);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("c_sd", "J", J);
      current_statement__ = 62;
      context__.validate_dims("data initialization", "c_sd", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(J)});
      c_sd_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, J,
                      std::numeric_limits<double>::quiet_NaN());
      new (&c_sd) Eigen::Map<Eigen::Matrix<double,-1,-1>>(c_sd_data__.data(),
        K, J);
      {
        std::vector<local_scalar_t__> c_sd_flat__;
        current_statement__ = 62;
        c_sd_flat__ = context__.vals_r("c_sd");
        current_statement__ = 62;
        pos__ = 1;
        current_statement__ = 62;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 62;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 62;
            stan::model::assign(c_sd, c_sd_flat__[(pos__ - 1)],
              "assigning variable c_sd", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 62;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 63;
      stan::math::validate_non_negative_index("sigma_shape", "J", J);
      current_statement__ = 64;
      context__.validate_dims("data initialization", "sigma_shape", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      sigma_shape_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                             std::numeric_limits<double>::quiet_NaN());
      new (&sigma_shape)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_shape_data__.data(), J);
      {
        std::vector<local_scalar_t__> sigma_shape_flat__;
        current_statement__ = 64;
        sigma_shape_flat__ = context__.vals_r("sigma_shape");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 64;
          stan::model::assign(sigma_shape, sigma_shape_flat__[(pos__ - 1)],
            "assigning variable sigma_shape", stan::model::index_uni(sym1__));
          current_statement__ = 64;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 65;
      stan::math::validate_non_negative_index("sigma_rate", "J", J);
      current_statement__ = 66;
      context__.validate_dims("data initialization", "sigma_rate", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      sigma_rate_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                            std::numeric_limits<double>::quiet_NaN());
      new (&sigma_rate)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_rate_data__.data(), J);
      {
        std::vector<local_scalar_t__> sigma_rate_flat__;
        current_statement__ = 66;
        sigma_rate_flat__ = context__.vals_r("sigma_rate");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 66;
          stan::model::assign(sigma_rate, sigma_rate_flat__[(pos__ - 1)],
            "assigning variable sigma_rate", stan::model::index_uni(sym1__));
          current_statement__ = 66;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 67;
      context__.validate_dims("data initialization", "not_solo", "double",
        std::vector<size_t>{});
      not_solo = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 67;
      not_solo = context__.vals_r("not_solo")[(1 - 1)];
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "not_solo", not_solo, 0);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("X_intercept", "N", N);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "X_intercept", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(1)});
      X_intercept_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, 1,
                             std::numeric_limits<double>::quiet_NaN());
      new (&X_intercept)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_intercept_data__.data(), N,
        1);
      {
        std::vector<local_scalar_t__> X_intercept_flat__;
        current_statement__ = 69;
        X_intercept_flat__ = context__.vals_r("X_intercept");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          current_statement__ = 69;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 69;
            stan::model::assign(X_intercept, X_intercept_flat__[(pos__ - 1)],
              "assigning variable X_intercept",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 69;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 70;
      stan::math::validate_non_negative_index("X_inner", "N", N);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("X_inner", "L1", L1);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "X_inner", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(L1)});
      X_inner_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, L1,
                         std::numeric_limits<double>::quiet_NaN());
      new (&X_inner)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_inner_data__.data(), N, L1);
      {
        std::vector<local_scalar_t__> X_inner_flat__;
        current_statement__ = 72;
        X_inner_flat__ = context__.vals_r("X_inner");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= L1; ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 72;
            stan::model::assign(X_inner, X_inner_flat__[(pos__ - 1)],
              "assigning variable X_inner", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 72;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 73;
      stan::math::validate_non_negative_index("omicron_shape", "J", J);
      current_statement__ = 74;
      context__.validate_dims("data initialization", "omicron_shape",
        "double", std::vector<size_t>{static_cast<size_t>(J)});
      omicron_shape_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                               std::numeric_limits<double>::quiet_NaN());
      new (&omicron_shape)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(omicron_shape_data__.data(),
        J);
      {
        std::vector<local_scalar_t__> omicron_shape_flat__;
        current_statement__ = 74;
        omicron_shape_flat__ = context__.vals_r("omicron_shape");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 74;
          stan::model::assign(omicron_shape, omicron_shape_flat__[(pos__ -
            1)], "assigning variable omicron_shape",
            stan::model::index_uni(sym1__));
          current_statement__ = 74;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 75;
      stan::math::validate_non_negative_index("omicron_rate", "J", J);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "omicron_rate",
        "double", std::vector<size_t>{static_cast<size_t>(J)});
      omicron_rate_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                              std::numeric_limits<double>::quiet_NaN());
      new (&omicron_rate)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(omicron_rate_data__.data(), J);
      {
        std::vector<local_scalar_t__> omicron_rate_flat__;
        current_statement__ = 76;
        omicron_rate_flat__ = context__.vals_r("omicron_rate");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 76;
          stan::model::assign(omicron_rate, omicron_rate_flat__[(pos__ - 1)],
            "assigning variable omicron_rate", stan::model::index_uni(sym1__));
          current_statement__ = 76;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 77;
      stan::math::validate_non_negative_index("sigma_raw", "J", J);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("sigma_pack", "J", J);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("mu_pack", "K", K);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("alpha", "K", K);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("alpha", "1", 1);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("beta1", "K", K);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("beta1", "L1", L1);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("sigma", "J", J);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("omicron", "J", J);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("p", "N", N);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("p", "K", K);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("var_y", "N", N);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("var_y", "J", J);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("f", "N", N);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("f", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = J + J + K + (K * 1) + (K * L1);
  }
  inline std::string model_name() const final {
    return "model_STAN_nested_1_random_effect_pxr_raw";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_STAN_nested_1_random_effect_pxr_raw_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 1;
      sigma_raw = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, J);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_pack =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 2;
      sigma_pack = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, J);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_pack =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      mu_pack = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                  K);
      Eigen::Matrix<local_scalar_t__,-1,-1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, 1, DUMMY_VAR__);
      current_statement__ = 4;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(K, 1);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta1 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, L1, DUMMY_VAR__);
      current_statement__ = 5;
      beta1 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(K,
                L1);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(sigma,
        stan::math::add(0.001, stan::math::multiply(not_solo, sigma_raw)),
        "assigning variable sigma");
      Eigen::Matrix<local_scalar_t__,-1,1> omicron =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> p =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> var_y =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, J, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> f =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, K, DUMMY_VAR__);
      current_statement__ = 15;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 13;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 11;
          stan::model::assign(f,
            stan::math::dot_product(
              stan::model::rvalue(X_inner, "X_inner",
                stan::model::index_uni(i), stan::model::index_omni()),
              stan::model::rvalue(beta1, "beta1", stan::model::index_uni(k),
                stan::model::index_omni())), "assigning variable f",
            stan::model::index_uni(i), stan::model::index_uni(k));
        }
      }
      current_statement__ = 18;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 16;
        stan::model::assign(p,
          stan::math::to_row_vector(
            stan::math::softmax(
              stan::math::to_vector(
                stan::model::rvalue(f, "f", stan::model::index_uni(i),
                  stan::model::index_omni())))), "assigning variable p",
          stan::model::index_uni(i), stan::model::index_omni());
      }
      current_statement__ = 23;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 21;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 19;
          stan::model::assign(var_y,
            (((stan::math::dot_product(
                 stan::math::square(
                   stan::math::elt_multiply(
                     stan::math::to_vector(
                       stan::model::rvalue(p, "p", stan::model::index_uni(i),
                         stan::model::index_omni())),
                     stan::model::rvalue(q, "q", stan::model::index_omni(),
                       stan::model::index_uni(j)))),
                 stan::math::add(
                   stan::math::square(
                     stan::model::rvalue(s_sd, "s_sd",
                       stan::model::index_omni(), stan::model::index_uni(j))),
                   stan::math::square(
                     stan::model::rvalue(c_sd, "c_sd",
                       stan::model::index_omni(), stan::model::index_uni(j)))))
            /
            stan::math::square(
              stan::math::dot_product(
                stan::math::to_vector(
                  stan::model::rvalue(p, "p", stan::model::index_uni(i),
                    stan::model::index_omni())),
                stan::model::rvalue(q, "q", stan::model::index_omni(),
                  stan::model::index_uni(j))))) *
            stan::math::square(
              stan::model::rvalue(omicron, "omicron",
                stan::model::index_uni(j)))) +
            stan::math::square(
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(j)))),
            "assigning variable var_y", stan::model::index_uni(i),
            stan::model::index_uni(j));
        }
      }
      {
        current_statement__ = 30;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 26;
          for (int l = 1; l <= L1; ++l) {
            current_statement__ = 24;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(beta1, "beta1",
                               stan::model::index_uni(k),
                               stan::model::index_uni(l)),
                             stan::model::rvalue(mu_pack, "mu_pack",
                               stan::model::index_uni(k)),
                             stan::math::square(sigma_pack)));
          }
          current_statement__ = 27;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(mu_pack, "mu_pack",
                             stan::model::index_uni(k)), 0, 1));
          current_statement__ = 28;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(alpha, "alpha",
                             stan::model::index_uni(k),
                             stan::model::index_uni(1)), 0, 1));
        }
        current_statement__ = 31;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(sigma_pack, 0, 20));
        current_statement__ = 32;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(sigma_raw,
                         sigma_shape, sigma_rate));
        current_statement__ = 33;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(omicron,
                         omicron_shape, omicron_rate));
        current_statement__ = 39;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 37;
          for (int i = 1; i <= N; ++i) {
            local_scalar_t__ mu_ij = DUMMY_VAR__;
            current_statement__ = 34;
            mu_ij = (stan::math::dot_product(
                       stan::math::elt_multiply(
                         stan::math::to_vector(
                           stan::model::rvalue(p, "p",
                             stan::model::index_uni(i),
                             stan::model::index_omni())),
                         stan::model::rvalue(q, "q",
                           stan::model::index_omni(),
                           stan::model::index_uni(j))),
                       stan::math::add(
                         stan::model::rvalue(s_mean, "s_mean",
                           stan::model::index_omni(),
                           stan::model::index_uni(j)),
                         stan::model::rvalue(c_mean, "c_mean",
                           stan::model::index_omni(),
                           stan::model::index_uni(j))))
              /
              stan::math::dot_product(
                stan::math::to_vector(
                  stan::model::rvalue(p, "p", stan::model::index_uni(i),
                    stan::model::index_omni())),
                stan::model::rvalue(q, "q", stan::model::index_omni(),
                  stan::model::index_uni(j))));
            current_statement__ = 35;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i),
                               stan::model::index_uni(j)), mu_ij,
                             stan::math::sqrt(
                               stan::model::rvalue(var_y, "var_y",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(j)))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_STAN_nested_1_random_effect_pxr_raw_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> sigma_raw =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      sigma_raw = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, J);
      Eigen::Matrix<double,-1,1> sigma_pack =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma_pack = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, J);
      Eigen::Matrix<double,-1,1> mu_pack =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      mu_pack = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                  K);
      Eigen::Matrix<double,-1,-1> alpha =
        Eigen::Matrix<double,-1,-1>::Constant(K, 1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(K, 1);
      Eigen::Matrix<double,-1,-1> beta1 =
        Eigen::Matrix<double,-1,-1>::Constant(K, L1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      beta1 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(K,
                L1);
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> omicron =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> p =
        Eigen::Matrix<double,-1,-1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> var_y =
        Eigen::Matrix<double,-1,-1>::Constant(N, J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> f =
        Eigen::Matrix<double,-1,-1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(sigma_raw);
      out__.write(sigma_pack);
      out__.write(mu_pack);
      out__.write(alpha);
      out__.write(beta1);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      stan::model::assign(sigma,
        stan::math::add(0.001, stan::math::multiply(not_solo, sigma_raw)),
        "assigning variable sigma");
      current_statement__ = 15;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 13;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 11;
          stan::model::assign(f,
            stan::math::dot_product(
              stan::model::rvalue(X_inner, "X_inner",
                stan::model::index_uni(i), stan::model::index_omni()),
              stan::model::rvalue(beta1, "beta1", stan::model::index_uni(k),
                stan::model::index_omni())), "assigning variable f",
            stan::model::index_uni(i), stan::model::index_uni(k));
        }
      }
      current_statement__ = 18;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 16;
        stan::model::assign(p,
          stan::math::to_row_vector(
            stan::math::softmax(
              stan::math::to_vector(
                stan::model::rvalue(f, "f", stan::model::index_uni(i),
                  stan::model::index_omni())))), "assigning variable p",
          stan::model::index_uni(i), stan::model::index_omni());
      }
      current_statement__ = 23;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 21;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 19;
          stan::model::assign(var_y,
            (((stan::math::dot_product(
                 stan::math::square(
                   stan::math::elt_multiply(
                     stan::math::to_vector(
                       stan::model::rvalue(p, "p", stan::model::index_uni(i),
                         stan::model::index_omni())),
                     stan::model::rvalue(q, "q", stan::model::index_omni(),
                       stan::model::index_uni(j)))),
                 stan::math::add(
                   stan::math::square(
                     stan::model::rvalue(s_sd, "s_sd",
                       stan::model::index_omni(), stan::model::index_uni(j))),
                   stan::math::square(
                     stan::model::rvalue(c_sd, "c_sd",
                       stan::model::index_omni(), stan::model::index_uni(j)))))
            /
            stan::math::square(
              stan::math::dot_product(
                stan::math::to_vector(
                  stan::model::rvalue(p, "p", stan::model::index_uni(i),
                    stan::model::index_omni())),
                stan::model::rvalue(q, "q", stan::model::index_omni(),
                  stan::model::index_uni(j))))) *
            stan::math::square(
              stan::model::rvalue(omicron, "omicron",
                stan::model::index_uni(j)))) +
            stan::math::square(
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(j)))),
            "assigning variable var_y", stan::model::index_uni(i),
            stan::model::index_uni(j));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(sigma);
        out__.write(omicron);
        out__.write(p);
        out__.write(var_y);
        out__.write(f);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(sigma_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable sigma_raw");
      out__.write_free_lb(0, sigma_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_pack =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(sigma_pack,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable sigma_pack");
      out__.write_free_lb(0, sigma_pack);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_pack =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(mu_pack,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable mu_pack");
      out__.write_free_lb(0, mu_pack);
      Eigen::Matrix<local_scalar_t__,-1,-1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, 1, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(K, 1),
        "assigning variable alpha");
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta1 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, L1, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(beta1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(K, L1),
        "assigning variable beta1");
      out__.write(beta1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "sigma_raw",
        "double", std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma_pack",
        "double", std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "mu_pack",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(1)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "beta1", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(L1)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_raw_flat__;
        current_statement__ = 1;
        sigma_raw_flat__ = context__.vals_r("sigma_raw");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(sigma_raw, sigma_raw_flat__[(pos__ - 1)],
            "assigning variable sigma_raw", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_pack =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_pack_flat__;
        current_statement__ = 2;
        sigma_pack_flat__ = context__.vals_r("sigma_pack");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(sigma_pack, sigma_pack_flat__[(pos__ - 1)],
            "assigning variable sigma_pack", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_pack);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_pack =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_pack_flat__;
        current_statement__ = 3;
        mu_pack_flat__ = context__.vals_r("mu_pack");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(mu_pack, mu_pack_flat__[(pos__ - 1)],
            "assigning variable mu_pack", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, mu_pack);
      Eigen::Matrix<local_scalar_t__,-1,-1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, 1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 4;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 4;
            stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
              "assigning variable alpha", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta1 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, L1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta1_flat__;
        current_statement__ = 5;
        beta1_flat__ = context__.vals_r("beta1");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= L1; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 5;
            stan::model::assign(beta1, beta1_flat__[(pos__ - 1)],
              "assigning variable beta1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"sigma_raw", "sigma_pack", "mu_pack",
                "alpha", "beta1"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"sigma", "omicron", "p", "var_y", "f"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K),
                  static_cast<size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(K),
                  static_cast<size_t>(L1)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_pack" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_pack" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= L1; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta1" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "omicron" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "p" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "var_y" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "f" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_pack" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_pack" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= L1; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta1" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "omicron" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "p" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "var_y" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "f" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"sigma_pack\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"mu_pack\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(1) + "},\"block\":\"parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(L1) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omicron\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"var_y\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"sigma_pack\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"mu_pack\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(1) + "},\"block\":\"parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(L1) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omicron\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"var_y\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((J + J) + K) + (K * 1)) + (K * L1));
    const size_t num_transformed = emit_transformed_parameters * (((((J + J)
      + (N * K)) + (N * J)) + (N * K)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((J + J) + K) + (K * 1)) + (K * L1));
    const size_t num_transformed = emit_transformed_parameters * (((((J + J)
      + (N * K)) + (N * J)) + (N * K)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_STAN_nested_1_random_effect_pxr_raw_namespace::model_STAN_nested_1_random_effect_pxr_raw;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_STAN_nested_1_random_effect_pxr_raw_namespace::profiles__;
}
#endif
#endif
